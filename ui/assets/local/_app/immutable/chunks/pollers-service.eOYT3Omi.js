import{t as l}from"./translate.BBe5dcco.js";import{r as h,a as g}from"./route-for-api.Cf5ROisF.js";const p=e=>(e!=null&&e.majorVersionSets?[...e.majorVersionSets]:[]).reverse(),y=e=>{if(!(!e||!e.length))return e[e.length-1]},k=e=>e?e.slice(0,e.length-1).reverse():[],C=e=>{var n;const t=p(e);if(!t.length)return;const s=(n=t[0])==null?void 0:n.buildIds;if(s!=null&&s.length)return y(t[0].buildIds)},v=e=>{var t,s;if(e!=null&&e.assignedBuildId)return e.assignedBuildId;if((t=e==null?void 0:e.mostRecentWorkerVersionStamp)!=null&&t.useVersioning)return((s=e.mostRecentWorkerVersionStamp)==null?void 0:s.buildId)||void 0},T=e=>{var t,s;if((t=e==null?void 0:e.workerVersionCapabilities)!=null&&t.useVersioning)return((s=e.workerVersionCapabilities)==null?void 0:s.buildId)||void 0},A=e=>[...new Set(e==null?void 0:e.map(T).filter(Boolean))],F=e=>e==null?void 0:e.some(t=>{var s;return(s=t==null?void 0:t.workerVersionCapabilities)==null?void 0:s.useVersioning});async function W(e,t=fetch){var a;const s=h("task-queue",e),n=await g(s,{request:t,params:{taskQueueType:"1"}}),r=await g(s,{request:t,params:{taskQueueType:"2"}});n!=null&&n.pollers||(n.pollers=[]),r!=null&&r.pollers||(r.pollers=[]),r.pollers.forEach(u=>{u.taskQueueTypes=["ACTIVITY"]}),n.pollers.forEach(u=>{u.taskQueueTypes=["WORKFLOW"]});const c=u=>(d,m)=>{const f=d[m.identity]||{lastAccessTime:void 0,taskQueueTypes:[]};return d[m.identity]={lastAccessTime:!f.lastAccessTime||f.lastAccessTime<m.lastAccessTime?m.lastAccessTime:f.lastAccessTime,taskQueueTypes:f.taskQueueTypes.concat([u])},d};r.pollers.filter(u=>n.pollers.some(d=>{if(u.identity===d.identity)return u.taskQueueTypes=[...d.taskQueueTypes,...u.taskQueueTypes],u})),(a=r.pollers)==null||a.reduce(c("ACTIVITY"),n.pollers.reduce(c("WORKFLOW"),{}));const i=r.pollers.length?r.pollers:n.pollers,o=r.pollers.length?r.taskQueueStatus:n.taskQueueStatus;return{pollers:i,taskQueueStatus:o}}async function B(e,t=fetch){const s=await I(e,t),n=await Q(e,t),r=p(n);return{rules:s,compatibility:n,versionSets:r}}async function I(e,t=fetch){const s=h("task-queue.rules",e);return g(s,{request:t,handleError:n=>{}})}async function Q(e,t=fetch){const s=h("task-queue.compatibility",e);return g(s,{request:t,handleError:n=>{}})}async function E(e,t=fetch){const{namespace:s,buildIds:n,queue:r}=e,c=h("worker-task-reachability",{namespace:s}),i=new URLSearchParams;if(n.length)for(const o of n)i.append("buildIds",o);else i.append("buildIds",""),i.append("taskQueues",r);return await g(c,{request:t,params:i,handleError:o=>({buildIdReachability:[]})})}function V(e){return!e||!e.length?l("workers.ready-to-be-retired"):e.length===1&&e.includes("CLOSED")?l("common.maybe"):l("common.no")}function O(e,t,s){var i,o;const n=(i=e==null?void 0:e.buildIdReachability)==null?void 0:i.find(a=>a.buildId===s);if(!n)return"";const r=(o=n==null?void 0:n.taskQueueReachability)==null?void 0:o.find(a=>(a==null?void 0:a.taskQueue)===t);if(!r)return"";const c=r==null?void 0:r.reachability;return V(c)}export{p as a,C as b,T as c,O as d,y as e,k as f,W as g,B as h,A as i,E as j,v as k,F as p};
